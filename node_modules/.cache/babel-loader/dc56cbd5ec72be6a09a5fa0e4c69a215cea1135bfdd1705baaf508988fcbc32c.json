{"ast":null,"code":"var _jsxFileName = \"/health_fitness_tracker/fitness-tracker-frontend/src/components/ProgressChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register required components for Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst ProgressChart = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    // If there is a previous chart instance, destroy it\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    // Check if data exists to avoid creating a chart with empty data\n    if (data && data.labels && data.datasets) {\n      // Create a new chart instance\n      chartInstance.current = new ChartJS(chartRef.current, {\n        type: 'line',\n        data: {\n          labels: data.labels,\n          datasets: [{\n            label: 'Calories Burned',\n            data: data.datasets[0].data,\n            fill: true,\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            // Light background color\n            borderColor: 'rgba(75, 192, 192, 1)',\n            // Line color\n            pointBackgroundColor: 'rgba(75, 192, 192, 1)',\n            // Point color\n            pointBorderColor: '#fff',\n            // Point border color\n            pointHoverBackgroundColor: '#fff',\n            // Point hover background color\n            pointHoverBorderColor: 'rgba(75, 192, 192, 1)',\n            // Point hover border color\n            tension: 0.1 // Smooth the line\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          // Control the chart height independently\n          scales: {\n            x: {\n              type: 'category',\n              title: {\n                display: true,\n                text: 'Date',\n                font: {\n                  size: 14 // Font size for x-axis title\n                }\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Calories Burned',\n                font: {\n                  size: 14 // Font size for y-axis title\n                }\n              },\n              min: 0\n            }\n          },\n          plugins: {\n            legend: {\n              labels: {\n                font: {\n                  size: 12 // Font size for legend\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: function (tooltipItem) {\n                  return `Calories: ${tooltipItem.parsed.y}`; // Custom tooltip format\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n\n    // Cleanup function to destroy chart on component unmount\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data]); // Chart will update when the 'data' prop changes\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    style: {\n      height: '300px',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n};\n_s(ProgressChart, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = ProgressChart;\nexport default ProgressChart;\nvar _c;\n$RefreshReg$(_c, \"ProgressChart\");","map":{"version":3,"names":["React","useRef","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","ProgressChart","data","_s","chartRef","chartInstance","current","destroy","labels","datasets","type","label","fill","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","tension","options","responsive","maintainAspectRatio","scales","x","title","display","text","font","size","y","min","plugins","legend","tooltip","callbacks","tooltipItem","parsed","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/health_fitness_tracker/fitness-tracker-frontend/src/components/ProgressChart.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register required components for Chart.js\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst ProgressChart = ({ data }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    // If there is a previous chart instance, destroy it\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    // Check if data exists to avoid creating a chart with empty data\n    if (data && data.labels && data.datasets) {\n      // Create a new chart instance\n      chartInstance.current = new ChartJS(chartRef.current, {\n        type: 'line',\n        data: {\n          labels: data.labels,\n          datasets: [\n            {\n              label: 'Calories Burned',\n              data: data.datasets[0].data,\n              fill: true,\n              backgroundColor: 'rgba(75, 192, 192, 0.2)', // Light background color\n              borderColor: 'rgba(75, 192, 192, 1)', // Line color\n              pointBackgroundColor: 'rgba(75, 192, 192, 1)', // Point color\n              pointBorderColor: '#fff', // Point border color\n              pointHoverBackgroundColor: '#fff', // Point hover background color\n              pointHoverBorderColor: 'rgba(75, 192, 192, 1)', // Point hover border color\n              tension: 0.1, // Smooth the line\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false, // Control the chart height independently\n          scales: {\n            x: {\n              type: 'category',\n              title: {\n                display: true,\n                text: 'Date',\n                font: {\n                  size: 14, // Font size for x-axis title\n                },\n              },\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Calories Burned',\n                font: {\n                  size: 14, // Font size for y-axis title\n                },\n              },\n              min: 0,\n            },\n          },\n          plugins: {\n            legend: {\n              labels: {\n                font: {\n                  size: 12, // Font size for legend\n                },\n              },\n            },\n            tooltip: {\n              callbacks: {\n                label: function (tooltipItem) {\n                  return `Calories: ${tooltipItem.parsed.y}`; // Custom tooltip format\n                },\n              },\n            },\n          },\n        },\n      });\n    }\n\n    // Cleanup function to destroy chart on component unmount\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data]); // Chart will update when the 'data' prop changes\n\n  return <canvas ref={chartRef} style={{ height: '300px', width: '100%' }}></canvas>;\n};\n\nexport default ProgressChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}